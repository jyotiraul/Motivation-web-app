pipeline {
    agent any

    environment {
        IMAGE_VERSION = "${BUILD_NUMBER}"
        IMAGE_NAME = "rauljyoti/motivation-web-app:${IMAGE_VERSION}"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKERHUB_REPO = 'rauljyoti/motivation-web-app:latest'
        KUBE_CONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Check Docker Availability') {
            steps {
                echo 'Checking Docker version...'
                sh 'docker --version'
            }
        }

        stage('Clone Repository') {
            steps {
                cleanWs()
                git credentialsId: 'github-creds',
                    branch: 'main',
                    url: 'https://github.com/jyotiraul/Motivation-web-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    docker.build("${IMAGE_NAME}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    retry(3) {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                            def app = docker.image("${IMAGE_NAME}")
                            app.push()
                        }
                    }
                }
            }
        }


        stage('Deploy to Kubernetes') {
            steps {
                script {
                sh """
                kubectl --kubeconfig=${KUBE_CONFIG} apply -f deploy/deployment.yml
                kubectl --kubeconfig=${KUBE_CONFIG} apply -f deploy/service.yml
                kubectl --kubeconfig=${KUBE_CONFIG} set image deployment/motivation-app motivation-container=${IMAGE_NAME}
                """
            }
        }
    }

    }

     post {
        success {
            echo '✅ Pipeline succeeded!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
        always {
            echo 'ℹ️ Pipeline execution complete.'
        }
    }
}