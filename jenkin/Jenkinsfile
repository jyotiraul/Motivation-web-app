pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-cred')
        IMAGE_NAME = 'rauljyoti/motivation-web-app:latest'
        TF_VAR_docker_image = 'rauljyoti/motivation-web-app:latest'
    }

    stages {
        stage('Check Docker Availability') {
            steps {
                echo 'Checking Docker version...'
                sh 'docker --version'
            }
        }

        stage('Clone Repository') {
            steps {
                cleanWs()
                git credentialsId: 'github-token',
                    branch: 'main',
                    url: 'https://github.com/jyotiraul/sparknet-motivation-web-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    docker.build("${IMAGE_NAME}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-cred') {
                        def app = docker.image("${IMAGE_NAME}")
                        app.push()
                    }
                }
            }
        }

        stage('Terraform: Deploy Infrastructure') {
			steps {
			dir('infra') {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credential']]) {
                sh '''
					set -e
					rm -rf .terraform
					for i in {1..3}; do
                    terraform init -input=false -upgrade && break || sleep 5
					done
                    terraform validate
                    terraform plan -var="key_name=lab3" -out=tfplan
                    terraform apply -auto-approve tfplan
                '''
                }
            }
        }
    }
}



    post {
        success {
            echo 'pipeline succeeded!'
        }
        failure {
            echo 'pipeline failed!'
        }
        always {
            echo 'Pipeline execution complete.'
        }
    }
	triggers {
        githubPush()
    }
}