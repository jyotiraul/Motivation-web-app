pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-cred')
        IMAGE_NAME = 'rauljyoti/motivation-web-app:latest'
        STATIC_IP = ''  // will be set dynamically after terraform apply
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Check Docker') {
            steps {
                sh 'docker --version'
            }
        }

        stage('Clone Repo') {
            steps {
                cleanWs()
                git credentialsId: 'github-token',
                    url: 'https://github.com/jyotiraul/Motivation-web-app.git',
                    branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-cred') {
                        docker.image("${IMAGE_NAME}").push()
                    }
                }
            }
        }

        stage('Terraform Deploy Infra') {
            steps {
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credential']]) {
                        script {
                            sh '''
                                set -e
                                rm -rf .terraform
                                terraform init -input=false -upgrade
                                terraform validate
                                terraform plan -var="key_name=lab3" -out=tfplan
                                terraform apply -auto-approve tfplan
                            '''
                            // Capture the static IP from terraform output
                            def staticIp = sh(script: "terraform output -raw static_ip", returnStdout: true).trim()
                            env.STATIC_IP = staticIp
                            echo "Static IP from Terraform: ${env.STATIC_IP}"
                        }
                    }
                }
            }
        }

        stage('Deploy App to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'KEY')]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no -i \$KEY ubuntu@${env.STATIC_IP} <<EOF
                          docker pull rauljyoti/motivation-web-app:latest
                          docker stop motivation || true
                          docker rm motivation || true
                          docker run -d --name motivation -p 80:80 rauljyoti/motivation-web-app:latest
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment succeeded!'
        }
        failure {
            echo '❌ Deployment failed!'
        }
        always {
            echo '🌀 Pipeline complete.'
        }
    }
}
